"""Top-level functionality of the library. Most functions here are simplified for your convenience."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Application', 'create_array', 'get_default', 'add_value', 'add_color_override', 'render']

# %% ../nbs/00_core.ipynb 4
import numpy as np
import pygame

_DEFAULT = 0

_VALUES = []
_COLORS = []

class Application:
    def __init__(self, title: str, target_fps: int, vsync: bool = False):
        self.title = title
        self.target_fps = target_fps
        self.vsync = vsync

    def __hash__(self):
        return hash((self.title, self.target_fps, self.vsync))

# %% ../nbs/00_core.ipynb 8
def create_array(x: int, y: int) -> np.ndarray:
    """Create a 2D numpy array with the given dimensions."""
    return np.zeros((x, y), dtype=int) + _DEFAULT

def get_default(_DEFAULT) -> int:
    """Return the default value."""
    return _DEFAULT

def add_value(value: int, color: pygame.Color):
    """Add a value and its associated color to the global lists."""
    _VALUES.append(value)
    _COLORS.append(color)

def add_color_override(x: int, y: int, color: pygame.Color):
    """Add a color override for a specific value."""
    _COLOR_OVERRIDES[(x, y)] = color

def render(array: np.ndarray, app: Application | None = None) -> None:
    """Render + update + frame timing in a single call."""
    if not app:
        app = Application("NumpyToRender", 60)

    global _SCREEN, _COLOR_OVERRIDES, _CLOCK
    if "_COLOR_OVERRIDES" not in globals():
        _COLOR_OVERRIDES = {}
    if "_CLOCK" not in globals():
        _CLOCK = pygame.time.Clock()

    if not pygame.get_init():
        pygame.init()
        pygame.display.set_caption(app.title)
        _SCREEN = pygame.display.set_mode((array.shape[1], array.shape[0]))

    screen = _SCREEN

    for x in range(array.shape[0]):
        for y in range(array.shape[1]):
            color = _COLOR_OVERRIDES.get((x, y),
                     _COLORS[_VALUES.index(array[x, y])] if array[x, y] in _VALUES else pygame.Color(0, 0, 0))
            screen.set_at((y, x), color)

    pygame.display.flip()

    if not app.vsync:
        _CLOCK.tick(app.target_fps)
